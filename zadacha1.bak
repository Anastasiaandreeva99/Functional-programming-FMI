#lang racket
(define (one . params)
  (cond ((null? params) 1)
    (else (define func (caar params)) (define number (cdar params))
          ((eval func) (one) number)
          )  )
  )
(define (two . params)
  (cond ((null? params) 2)
    (else (define func (caar params)) (define number (cdar params))
          (func (one) number)
          )  )
  )
(define (three . params)
  (cond ((null? params) 3)
    (else (define func (caar params)) (define number (cdar params))
          (func (one) number)
          )  )
  )
(define (four . params)
  (cond ((null? params) 4)
    (else (define func (caar params)) (define number (cdar params))
          (func (one) number)
          )  )
  )
(define (five . params)
  (cond ((null? params) 5)
    (else (define func (caar params)) (define number (cdar params))
          (func (one) number)
          )  )
  )
(define (six . params)
  (cond ((null? params) 1)
    (else (define func (car params)) (define number (cdar params))
          (func (one) number)
          )  )
  )
(define (seven . params)
  (cond ((null? params) 1)
    (else (define func (car params)) (define number (cdar params))
          (func (one) number)
          )  )
  )
(define (eight. params)
  (cond ((null? params) 1)
    (else (define func (caar params)) (define number (cdar params))
          (func (one) number)
          )  )
  )
(define (nine . params)
  (cond ((null? params) 1)
    (else (define func (caar params)) (define number (cdar params))
          (func (one) number)
          )  )
  )
(define (plus a) (cons '+ a))
(define (time a) (cons '* a))
(define (div a) (cons '/ a))
(define (minus a) (cons '- a))


